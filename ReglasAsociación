---
title: "Reglas de asociación COVID19"
output: html_notebook
---

# Cargamos los paquetes y el dataset

```{r}
library(readr)
library(arules)
library(dplyr)
library(arulesViz)
library(colorspace)
df <- read_csv("C:/Users/PC/Desktop/COVID19_line_list_data.csv")

```


# Preprocesamiento de los datos

```{r}



names(df)
df$X22<-NULL
df$X23<-NULL
df$X24<-NULL
df$X25<-NULL
df$X26<-NULL
df$X27<-NULL
df$X22<-NULL
df$X4<-NULL
df$id<-NULL
df$link<-NULL
df$case_in_country<-NULL
df$symptom_onset<-NULL
df$`reporting date`<-NULL
df$summary<-NULL
df$exposure_end<-NULL
df$exposure_start<-NULL
df$source<-NULL

```

- Discretizamos los valores

```{r}
df$case_in_country<-factor(df$case_in_country)
df$`reporting date`<-factor(df$`reporting date`)
df$summary<-factor(df$summary)
df$location<-factor(df$location)
df$country<-factor(df$country)
df$gender<-factor(df$gender)
df$age<-discretize(df$age,breaks=4,labels=c("joven","adulto","senior","viejo"))
df$symptom_onset<-factor(df$symptom_onset)
df$If_onset_approximated<-factor(df$If_onset_approximated)
df$hosp_visit_date<-NULL
df$exposure_start<-factor(df$exposure_start)
df$exposure_end<-factor(df$exposure_end)
df$`visiting Wuhan`<-factor(df$`visiting Wuhan`)
df$`from Wuhan`<-factor(df$`from Wuhan`)
df$death<-factor(df$death)
df$recovered<-factor(df$recovered)
df$symptom<-factor(df$symptom)

```

# Descripción del conjunto de datos

```{r}
#Numero de filas y columnas
dim(df)
#comprobación de valores faltantes
sum(is.na(df))
```

A continuación haremos una breve descripción de las variables:

- location  : se refiere a la ciudad del infectado.
- country   : se refiere al pais del infectado.
- gender   : se refiere al genero.
- age     : se refiere al rango de edad al que pertenece. 
- If_onset_approximated
- visiting Wuhan : si visitó Wuham
- from Wuhan   : si proviene de Wuham
- death      : 0 no muere, 1 muere          
- recovered : 0 no recuperado, 1 recuperado
- symptom: síntomas             


Se muestra la cabecera de los datos
```{r}
head(df)
```


- Convertimos a tipo transaccciones

```{r}
df_t<-as(df,"transactions")
```

-Mostramos los items frecuentes con soporte mayor o igual al 30%


```{r}
itemFrequencyPlot(df_t, support = 0.3, cex.names = 0.8)
```


- Algoritmo apriori

```{r}
transacciones <- apriori(df_t,
                                parameter = list(support = 0.1,
                                                 target = "frequent"),
                                control = list(verbose = FALSE))

# Se ordenan las reglas por el valor del soporte
idf_t <- sort(transacciones, by = "support") 

# Itemsets frecuentes
barplot(table(size(idf_t)),
        xlab = "Tamaño de itemset", ylab = "Frecuencia",
        main = "Tamaños de itemsets en los itemsets frecuentes")
```


- Calculo de los itemset maximales y minimales
```{r}
# Itemsets maximales
imaxdf <- idf_t[is.maximal(idf_t)]

# Itemsets cerrados
iclouddf <- idf_t[is.closed(idf_t)]
```


- Se muestran en un gráfico el número de itemsets frecuentes, cerrados y maximales:

```{r}
barplot(c(Frecuentes = length(idf_t),
          Cerrados = length(iclouddf),
          Maximales = length(imaxdf)),
        ylab = "Frecuencia", xlab = "Tipo de itemsets")
        
        
```


        
        
        
- Obtención de las reglas de asociación con soporte 0.1 y confianza 0.8



```{r}
rules<-apriori(df,parameter = list(supp=0.01,conf=0.5,minlen=2))
rules
head(inspect(head(rules)))

```


- Eliminamos las redundantes

```{r}
rules<-rules[!is.redundant(rules)]
rules
```




- Ordenamos por confianza y filtramos por lift mayor que 1
```{r}
ordenadas<-sort(subset(rules, subset=lift > 1), by="confidence")
ordenadas
inspect(head(ordenadas))
```


- Si queremos investigar aquellas reglas donde el parametro death aparece como consecuente

```{r}
reglas_death <- subset(rules, subset = rhs %pin% "death=1")

inspect(head(reglas_death))
```


- Selección de reglas relevantes

```{r}

reglas_seleccionadas <- subset(rules, subset = lift > 1)
mInteres <- interestMeasure(reglas_seleccionadas,
                            measure = c("gini", "chiSquared"),
                            transactions=df_t)
quality(reglas_seleccionadas) <- cbind(quality(reglas_seleccionadas), mInteres)
subset(reglas_seleccionadas, subset = support > .2 & support < .4) %>%
  head(by = "gini", n = 5) %>%
  inspect
```





- Visualizamos las reglas


```{r}
plot(reglas_seleccionadas)
```


```{r}
#tipo grafo
reglas_seleccionadas %>%
  head(by = "gini", n = 10) %>%
  plot(method = "graph")

```



```{r}
plot(reglas_seleccionadas[1:10], method="graph", engine="graphviz")
```



```{r}

# Tipo matriz (Antecedente por columnas, consecuente por filas)
reglas_seleccionadas %>%
  head(by = "gini", n = 10) %>%
  plot(method = "grouped")

```







```{r}
# Tipo coordenadas paralelas
reglas_seleccionadas %>%
  head(by = "gini", n = 10) %>%
  plot(method = "paracoord", reorder = TRUE)
```


```{r}
plot(reglas_seleccionadas, control = list(col=sequential_hcl(100)))
```


```{r}
plot(reglas_seleccionadas, col=sequential_hcl(100))
```


```{r}
plot(reglas_seleccionadas, col=grey.colors(50, alpha =.8))
```


```{r}
 plot(reglas_seleccionadas, engine = "interactive")

```
```{r}
plot(reglas_seleccionadas, engine = "htmlwidget")
```
```{r}

plot(reglas_seleccionadas, method="matrix")

```



```{r}
plot(reglas_seleccionadas, method="matrix", engine = "3d")
```


```{r}
plot(reglas_seleccionadas, method="matrix", shading=c("lift", "confidence"))
```



```{r}
plot(reglas_seleccionadas, method="matrix", engine="interactive")

```


```{r}
plot(reglas_seleccionadas, method="matrix", engine="htmlwidget")
```

```{r}
plot(reglas_seleccionadas, method="grouped matrix")

```


```{r}
plot(reglas_seleccionadas, method="grouped matrix", 
     col = grey.colors(10), 
     gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
```

```{r}

plot(reglas_seleccionadas[1:10], method="graph", engine="htmlwidget")

```


```{r}
plot(reglas_seleccionadas[1:10], method="graph", engine="htmlwidget", 
     igraphLayout = "layout_in_circle")

```

